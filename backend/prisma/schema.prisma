generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id        Int      @id @default(autoincrement())
  nombre    String
  email     String   @unique
  password  String
  rol       Rol      @default(CLIENTE)
  creadoEn  DateTime @default(now())
  pedidos   Pedido[]
  resenas   Resena[]
}

enum Rol {
  ADMIN
  CLIENTE
}

model Categoria {
  id        Int        @id @default(autoincrement())
  nombre    String     @unique
  productos Producto[]
}

model Marca {
  id        Int        @id @default(autoincrement())
  nombre    String     @unique
  productos Producto[]
}

enum GeneroFragancia {
  MASCULINO
  FEMENINO
  UNISEX
}

model Producto {
  id          Int                         @id @default(autoincrement())
  nombre      String
  descripcion String
  precio      Float
  stock       Int
  imagenUrl   String                      // Imagen principal
  imagenesSecundarias ImagenProductoSecundaria[]
  tamanoMl    Float                       // Corregido a Float
  genero      GeneroFragancia
  marca       Marca                       @relation(fields: [marcaId], references: [id])
  marcaId     Int
  categoria   Categoria?                  @relation(fields: [categoriaId], references: [id])
  categoriaId Int?
  creadoEn    DateTime                    @default(now())
  pedidoItems PedidoItem[]
  resenas     Resena[]
}

model ImagenProductoSecundaria {
  id         Int      @id @default(autoincrement())
  url        String
  producto   Producto @relation(fields: [productoId], references: [id], onDelete: Cascade)
  productoId Int
}

model Resena {
  id          Int      @id @default(autoincrement())
  usuario     Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId   Int
  producto    Producto @relation(fields: [productoId], references: [id])
  productoId  Int
  puntuacion  Int      // 1-5 estrellas (validar en el código)
  comentario  String?
  creadoEn    DateTime @default(now())
}

enum EstadoPedido {
  CARRITO
  PAGADO
  ENVIADO
  ENTREGADO
  CANCELADO
}

model Pedido {
  id         Int           @id @default(autoincrement())
  usuario    Usuario       @relation(fields: [usuarioId], references: [id])
  usuarioId  Int
  estado     EstadoPedido  @default(CARRITO)
  direccion  String        // Dirección completa de envío
  telefono   String?       // Teléfono de contacto
  metodoPago String?       // Método de pago utilizado
  total      Float         // Monto total del pedido
  items      PedidoItem[]
  creadoEn   DateTime      @default(now())
}

model PedidoItem {
  id         Int      @id @default(autoincrement())
  pedido     Pedido   @relation(fields: [pedidoId], references: [id])
  pedidoId   Int
  producto   Producto @relation(fields: [productoId], references: [id])
  productoId Int
  cantidad   Int
  precio     Float    // Precio en el momento de la compra
}

model Cupon {
  id          Int       @id @default(autoincrement())
  codigo      String    @unique
  descuento   Float     // Valor del descuento (porcentaje)
  activo      Boolean   @default(true)
  fechaExpira DateTime?
}